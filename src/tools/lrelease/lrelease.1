.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "LRELEASE 1"
.TH LRELEASE 1 "2019-05-07" "Katie 4.9.0" "Katie Manual"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
lrelease \- part of Qt's Linguist tool chain
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
lrelease [options] ts-files [\-qm qm\-file]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
lrelease can be used as a stand-alone tool to convert XML-based translations
files in the \s-1TS\s0 format into the 'compiled' \s-1QM\s0 format used by QTranslator
objects.
.SH "OPTIONS"
.IX Header "OPTIONS"
.Vb 2
\&    \-help
\&           Display this information and exit.
\&
\&    \-idbased
\&           Use IDs instead of source strings for message keying.
\&
\&    \-compress
\&           Compress the QM files.
\&
\&    \-nounfinished
\&           Do not include unfinished translations.
\&
\&    \-removeidentical
\&           If the translated text is the same as the source text,
\&           do not include the message.
\&
\&    \-markuntranslated <prefix>
\&           If a message has no real translation, use the source text
\&           prefixed with the given string instead.
\&
\&    \-silent
\&           Do not explain what is being done.
\&
\&    \-version
\&           Display the version of lrelease and exit.
.Ve
.SH "EXIT STATUS"
.IX Header "EXIT STATUS"
lrelease returns 0 on success, 1 on wrong usage and other on unexpected
failure.
.SH "AUTHORS"
.IX Header "AUTHORS"
The Qt Company Ltd.
.PP
Copyright (C) 2015 The Qt Company Ltd.
.PP
Licensed through \s-1GNU\s0 Lesser General Public License/GNU General Public License.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIlconvert\fR\|(1) \fIlupdate\fR\|(1)
