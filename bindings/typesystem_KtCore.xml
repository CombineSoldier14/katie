<?xml version="1.0"?>
<typesystem package="KtCore">

    <primitive-type name="bool"/>
    <primitive-type name="int"/>
    <primitive-type name="uint"/>
    <primitive-type name="unsigned int"/>
    <primitive-type name="double"/>
    <primitive-type name="float"/>
    <primitive-type name="long"/>
    <primitive-type name="ulong"/>
    <primitive-type name="longlong"/>
    <primitive-type name="long long"/>
    <primitive-type name="ulonglong"/>
    <primitive-type name="unsigned long long"/>
    <primitive-type name="short"/>
    <primitive-type name="ushort"/>
    <primitive-type name="char"/>
    <primitive-type name="uchar"/>
    <primitive-type name="unsigned char"/>
    <primitive-type name="pid_t"/>
    <primitive-type name="size_t"/>
    <primitive-type name="int64_t"/>
    <primitive-type name="mode_t"/>
    <primitive-type name="time_t"/>
    <primitive-type name="std::string"/>

    <primitive-type name="qint64"/>
    <primitive-type name="qlonglong"/>

    <template name="cpplist_to_pylist_convertion">
        PyObject* %out = PyList_New((int) %in.size());
        %INTYPE::const_iterator it = %in.begin();
        for (int idx = 0; it != %in.end(); ++it, ++idx) {
            %INTYPE_0 cppItem(*it);
            PyList_SET_ITEM(%out, idx, %CONVERTTOPYTHON[%INTYPE_0](cppItem));
        }
        return %out;
    </template>

    <template name="pyseq_to_cpplist_convertion">
    Shiboken::AutoDecRef seq(PySequence_Fast(%in, 0));
    for (int i = 0; i &lt; PySequence_Fast_GET_SIZE(seq.object()); i++) {
        PyObject* pyItem = PySequence_Fast_GET_ITEM(seq.object(), i);
        %OUTTYPE_0 cppItem = %CONVERTTOCPP[%OUTTYPE_0](pyItem);
        %out.push_back(cppItem);
    }
    </template>

    <template name="cppvector_to_pylist_convertion">
        PyObject* %out = PyList_New((int) %in.size());
        %INTYPE::const_iterator it = %in.begin();
        for (int idx = 0; it != %in.end(); ++it, ++idx) {
            %INTYPE_0 cppItem(*it);
            PyList_SET_ITEM(%out, idx, %CONVERTTOPYTHON[%INTYPE_0](cppItem));
        }
        return %out;
    </template>

    <template name="pyseq_to_cppvector_convertion">
    Shiboken::AutoDecRef seq(PySequence_Fast(%in, 0));
    for (int i = 0; i &lt; PySequence_Fast_GET_SIZE(seq.object()); i++) {
        PyObject* pyItem = PySequence_Fast_GET_ITEM(seq.object(), i);
        %OUTTYPE_0 cppItem = %CONVERTTOCPP[%OUTTYPE_0](pyItem);
        %out.push_back(cppItem);
    }
    </template>

    <template name="cppmap_to_pymap_conversion">
        PyObject *%out = PyDict_New();
        for (%INTYPE::const_iterator it = %in.begin(); it != %in.end(); ++it) {
            %INTYPE_0 key = it->first;
            %INTYPE_1 value = it->second;
            PyObject *pyKey = %CONVERTTOPYTHON[%INTYPE_0](key);
            PyObject *pyValue = %CONVERTTOPYTHON[%INTYPE_1](value);
            PyDict_SetItem(%out, pyKey, pyValue);
            Py_DECREF(pyKey);
            Py_DECREF(pyValue);
        }
        return %out;
    </template>

    <template name="pydict_to_cppmap_conversion">
        PyObject *key;
        PyObject *value;
        Py_ssize_t pos = 0;
        while (PyDict_Next(%in, &amp;pos, &amp;key, &amp;value)) {
            %OUTTYPE_0 cppKey = %CONVERTTOCPP[%OUTTYPE_0](key);
            %OUTTYPE_1 cppValue = %CONVERTTOCPP[%OUTTYPE_1](value);
            %out[cppKey] = cppValue;
        }
    </template>

    <container-type name="std::list" type="list">
        <include file-name="list" location="global"/>
        <conversion-rule>
            <native-to-target>
                <insert-template name="cpplist_to_pylist_convertion"/>
            </native-to-target>
            <target-to-native>
                <add-conversion type="PySequence">
                    <insert-template name="pyseq_to_cpplist_convertion"/>
                </add-conversion>
            </target-to-native>
        </conversion-rule>
    </container-type>

    <container-type name="std::vector" type="vector">
        <include file-name="vector" location="global"/>
        <conversion-rule>
            <native-to-target>
                <insert-template name="cppvector_to_pylist_convertion"/>
            </native-to-target>
            <target-to-native>
                <add-conversion type="PySequence">
                    <insert-template name="pyseq_to_cppvector_convertion"/>
                </add-conversion>
            </target-to-native>
        </conversion-rule>
    </container-type>

    <container-type name="std::map" type="map">
        <include file-name="map" location="global"/>
        <conversion-rule>
            <native-to-target>
                <insert-template name="cppmap_to_pymap_conversion"/>
            </native-to-target>
            <target-to-native>
                <add-conversion type="PyDict">
                    <insert-template name="pydict_to_cppmap_conversion"/>
                </add-conversion>
            </target-to-native>
        </conversion-rule>
    </container-type>

    <container-type name="std::pair" type="pair">
        <include file-name="utility" location="global"/>
        <conversion-rule>
            <native-to-target>
            PyObject *%out = PyTuple_New(2);
            PyTuple_SET_ITEM(%out, 0, %CONVERTTOPYTHON[%INTYPE_0](%in.first));
            PyTuple_SET_ITEM(%out, 1, %CONVERTTOPYTHON[%INTYPE_1](%in.second));
            return %out;
            </native-to-target>
            <target-to-native>
                <add-conversion type="PySequence">
                %out.first = %CONVERTTOCPP[%OUTTYPE_0](PySequence_Fast_GET_ITEM(%in, 0));
                %out.second = %CONVERTTOCPP[%OUTTYPE_1](PySequence_Fast_GET_ITEM(%in, 1));
                </add-conversion>
            </target-to-native>
        </conversion-rule>
    </container-type>

    <!-- using generate="no" to avoid namespaced bindings, this puts types into module namespace -->
    <namespace-type name="Katie" generate="no">

        <enum-type name="QtMsgType"/>

        <namespace-type name="Qt" generate="no">
           <enum-type name="AlignmentFlag"/>
           <enum-type name="AnchorAttribute"/>
           <enum-type name="AnchorPoint"/>
           <enum-type name="ApplicationAttribute"/>
           <enum-type name="ArrowType"/>
           <enum-type name="AspectRatioMode"/>
           <enum-type name="Axis"/>
           <enum-type name="BGMode"/>
           <enum-type name="BrushStyle"/>
           <enum-type name="CaseSensitivity"/>
           <enum-type name="CheckState"/>
           <enum-type name="ClipOperation"/>
           <enum-type name="ConnectionType"/>
           <enum-type name="ContextMenuPolicy"/>
           <enum-type name="CoordinateSystem"/>
           <enum-type name="Corner"/>
           <enum-type name="CursorMoveStyle"/>
           <enum-type name="CursorShape"/>
           <enum-type name="DateFormat"/>
           <enum-type name="DayOfWeek"/>
           <enum-type name="DockWidgetArea"/>
           <enum-type name="DockWidgetAreaSizes"/>
           <enum-type name="DropAction"/>
           <enum-type name="EventPriority"/>
           <enum-type name="FillRule"/>
           <enum-type name="FocusPolicy"/>
           <enum-type name="FocusReason"/>
           <enum-type name="GestureFlag"/>
           <enum-type name="GestureState"/>
           <enum-type name="GestureType"/>
           <enum-type name="GlobalColor"/>
           <enum-type name="ImageConversionFlag"/>
           <enum-type name="Initialization"/>
           <enum-type name="ItemDataRole"/>
           <enum-type name="ItemFlag"/>
           <enum-type name="ItemSelectionMode"/>
           <enum-type name="Key"/>
           <enum-type name="KeyboardModifier"/>
           <enum-type name="LayoutDirection"/>
           <enum-type name="MaskMode"/>
           <enum-type name="MatchFlag"/>
           <enum-type name="Modifier"/>
           <enum-type name="MouseButton"/>
           <enum-type name="NavigationMode"/>
           <enum-type name="Orientation"/>
           <enum-type name="PenCapStyle"/>
           <enum-type name="PenJoinStyle"/>
           <enum-type name="PenStyle"/>
           <enum-type name="ScrollBarPolicy"/>
           <enum-type name="ShortcutContext"/>
           <enum-type name="SizeHint"/>
           <enum-type name="SizeMode"/>
           <enum-type name="SortOrder"/>
           <enum-type name="TextElideMode"/>
           <enum-type name="TextFlag"/>
           <enum-type name="TextFormat"/>
           <enum-type name="TextInteractionFlag"/>
           <enum-type name="TileRule"/>
           <enum-type name="TimeSpec"/>
           <enum-type name="ToolBarArea"/>
           <enum-type name="ToolBarAreaSizes"/>
           <enum-type name="ToolButtonStyle"/>
           <enum-type name="TouchPointState"/>
           <enum-type name="TransformationMode"/>
           <enum-type name="UIEffect"/>
           <enum-type name="WidgetAttribute"/>
           <enum-type name="WindowFrameSection"/>
           <enum-type name="WindowModality"/>
           <enum-type name="WindowState"/>
           <enum-type name="WindowType"/>
        </namespace-type>

        <value-type name="QByteArray">
        </value-type>

        <value-type name="QChar">
            <enum-type name="SpecialCharacter"/>
            <enum-type name="Category"/>
            <enum-type name="Direction"/>
            <enum-type name="Decomposition"/>
            <enum-type name="Joining"/>
            <enum-type name="CombiningClass"/>
            <enum-type name="UnicodeVersion"/>
        </value-type>

        <object-type name="QCoreApplication">
            <modify-function signature="QCoreApplication(int &amp;, char**)">
                <modify-argument index="1">
                    <remove-argument/>
                    <conversion-rule class="native">
                    int %out = PySequence_Size(%PYARG_1);
                    </conversion-rule>
                </modify-argument>
                <modify-argument index="2">
                    <replace-type modified-type="PySequence" />
                    <conversion-rule class="native">
                        Shiboken::AutoArrayPointer&lt;char*&gt; %out(%1);
                        for (int i = 0; i &lt; %1; ++i)
                            %out[i] = %CONVERTTOCPP[char*](PySequence_Fast_GET_ITEM(%PYARG_1, i));
                    </conversion-rule>
                </modify-argument>
            </modify-function>
        </object-type>

        <object-type name="QObject">
        </object-type>

        <value-type name="QString">
            <enum-type name="SectionFlag"/>
            <!-- <primitive-type name="SectionFlags"/> -->
            <enum-type name="SplitBehavior"/>
            <enum-type name="NormalizationForm"/>
        </value-type>

        <object-type name="QTextBoundaryFinder">
            <enum-type name="BoundaryType"/>
            <enum-type name="BoundaryReason"/>
        </object-type>

        <object-type name="QLatin1Char">
        </object-type>

        <value-type name="QLatin1String">
        </value-type>

    </namespace-type>

</typesystem>
